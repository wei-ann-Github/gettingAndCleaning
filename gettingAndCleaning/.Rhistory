swirl()
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips = sample(c(0,1), 100, prob = c(0.3, 0.7), replacement = TRUE)
flips = sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
plot(run.cleaner.df$Distance,run.cleaner.df$Time)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran")
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran")
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 2)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 0)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
?par
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 2)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
par(mar = + c(0,0,0,1))
legend("right", legend = c(1,2,3,4))
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
par(mar)
?par(mar)
mar
par("mar")
par()
?resetpar
resetPar <- function() {
dev.new()
op <- par(no.readonly = TRUE)
dev.off()
op
}
par(resetPar())
par(mar = c(5.1,4.1,4.1,4.1))
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
legend("right", legend = c(1,2,3,4))
par(mar = c(5.1,4.1,4.1,10))
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
legend("right", legend = c(1,2,3,4))
legend("topleft", legend = c(1,2,3,4))
legend("topleft", legend = c(1,2,3,4), ncol = 2, nrow = 2)
?legend
legend("topleft", legend = c(1,2,3,4), ncol = 2)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = "red", pch = 2)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = "red", pch = 2, fill = TRUE)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = "red", pch = 12)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = "red", pch = 15)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = "red", pch = 13)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = "red", pch = 14)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = "red", pch = 16)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = c("red","blue"), pch = 16)
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = c("red","blue"), pch = 16, title = "types")
?layout
layout(widths = c(7,1))
layout(cbind(1,2),widths = c(7,1))
legend("topleft", legend = c(1,2,3,4), ncol = 2, col = c("red","blue"), pch = 16, title = "types")
legend("right", legend = c(1,2,3,4), ncol = 2, col = c("red","blue"), pch = 16, title = "types")
legend("bottom", legend = c(1,2,3,4), ncol = 2, col = c("red","blue"), pch = 16, title = "types")
plot.new()
legend("bottom", legend = c(1,2,3,4), ncol = 2, col = c("red","blue"), pch = 16, title = "types")
legend("right", legend = c(1,2,3,4), ncol = 2, col = c("red","blue"), pch = 16, title = "types")
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
par
par()
resetPar()
> plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
run_predict
run.predict <- lm(run.cleaner.df$Time ~ run.cleaner.df$Distance)
run.predict
summary(run.predict)
abline(run.predict)
summary(run.cleaner.df)
run.cleaner.df <- read.csv("penang_training.csv")
summart(run.cleaner.df)
summary(run.cleaner.df)
summary(run.cleaner.df$Activity.Type)
race = run.cleaner.df[,Activity.Type == "Race"]
race = run.cleaner.df[,run.cleaner.df$Activity.Type == "Race"]
race = run.cleaner.df[run.cleaner.df$Activity.Type == "Race",]
race
race = run.cleaner.df[Activity.Type == "Race",]
race = run.cleaner.df[run.cleaner.df$Activity.Type == "Race",]
race = run.cleaner.df[run.cleaner.df$Activity.Type %in% "Street",]
race
race = run.cleaner.df[run.cleaner.df$Activity.Type %contains% "Street",]
race = run.cleaner.df[run.cleaner.df$Activity.Type %contain% "Street",]
race = run.cleaner.df[run.cleaner.df$Activity.Type == "Street*",]
race
race = run.cleaner.df[run.cleaner.df$Activity.Type == "^Street*",]
race
race = run.cleaner.df[run.cleaner.df$Activity.Type == "^Street",]
race
street = run.cleaner.df[run.cleaner.df$Activity.Type == "Street Running",]
street
race = run.cleaner.df[run.cleaner.df$Activity.Type == "Race",]
street = run.cleaner.df[run.cleaner.df$Activity.Type == "Street Running",]
track = run.cleaner.df[run.cleaner.df$Activity.Type == "Track Running",]
track
street
# hi
# 1+1
points(c(race, street, track), pch = 20, col = c("gray40", "blueviolet", "aquamarine4"))
points(c(race$Dis, street$Dis, track$Dis), c(race$Ti, street$Ti, track$Ti), pch = 20, col = c("gray40", "blueviolet", "aquamarine4"))
points(c(race$Dis, street$Dis, track$Dis), c(race$Ti, street$Ti, track$Ti), pch = 20, col = c("coral", "blueviolet", "aquamarine4"))
points(c(race$Dis, street$Dis, track$Dis), c(race$Ti, street$Ti, track$Ti), pch = 20, col = c("coral", "blueviolet", "cyan2"))
a
b
run.clean.df
run.cleaner.df <- subset(run.clean.df, run.clean.df[,1] != "Soccer training")
rename <- read.csv("penang_training.csv")
rename$Activity
rename$Activity.Type
run.cleaner.df$Activit <- rename$Activity.Type
summary(run.cleaner.df)
summary(rename)
run.cleaner.df$Activity.Type <- rename$Activity.Type
summary(run.cleaner.df)
race = run.cleaner.df[run.cleaner.df$Activity.Type == "Race",]
street = run.cleaner.df[run.cleaner.df$Activity.Type == "Street Running",]
track = run.cleaner.df[run.cleaner.df$Activity.Type == "Track Running",]
> plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
abline(run.predict)
?points
points(c(race$Dis, street$Dis, track$Dis), c(race$Ti, street$Ti, track$Ti), col = c("coral", "blueviolet", "cyan2"))
points(race$Dis, race$Ti, col = "coral")
points(street$Dis, street$Ti, col = "blueviolet")
points(track$Dis, track$Ti, col = "cyan2")
race
run.cleaner.df
install.packages(ggplot)
install.packages("ggplot"")
install.packages("ggplot")
install.packages("ggplot")
install.packages("ggplot2")
run.df
run.df <- read.csv("penang_training.csv")
run.df
> inhours <- run.df[nchar(as.character(run.df$Time))==7,]
inhours <- run.df[nchar(as.character(run.df$Time))==7,]
inmins <- run.df[!nchar(as.character(run.df$Time)) == 8,]
inhours$Time <- strptime(inhours$Time, "%H:%M:%S")
inmins$Time <- strptime(inmins$Time, "%M:%S")
run.cleaner.df <- rbind(inhours,inmins)
race = run.cleaner.df[run.cleaner.df$Activity.Type == "Race",]
street = run.cleaner.df[run.cleaner.df$Activity.Type == "Street Running",]
track = run.cleaner.df[run.cleaner.df$Activity.Type == "Track Running",]
run.predict <- lm(run.cleaner.df$Time ~ run.cleaner.df$Distance)
str(run.cleaner.df)
run.predict <- lm(as.POSIXct(run.cleaner.df$Time) ~ run.cleaner.df$Distance)
plot(run.predict)
summary(run.predict)
run.predict
run.cleaner.df$Time = as.POSIXct(run.cleaner.df$Time)
summary(run.cleaner.df)
str(run.cleaner.df)
run.predict <- lm(as.POSIXct(run.cleaner.df$Time) ~ run.cleaner.df$Distance)
plot(run.predict)
run.predict <- lm(run.cleaner.df$Time ~ run.cleaner.df$Distance)
summary(run.predict)
run.cleaner.df$Time
run.cleaner.df$Time = run.cleaner.df$Time - "2014-12-19"
run.cleaner.df$Time = run.cleaner.df$Time - as.POSIXlt("2014-12-19")
str(run.cleaner.df$Time)
run.predict <- lm(run.cleaner.df$Time ~ run.cleaner.df$Distance)
plot(run.predict)
class(run.cleaner.df$Time)
> run.clean.df$Time <- as.numeric(run.clean.df$Time)
run.cleaner.df$Time <- as.numeric(run.cleaner.df$Time)
plot(run.predict)
run.predict <- lm(run.cleaner.df$Time ~ run.cleaner.df$Distance)
plot(run.predict)
plot(run.cleaner.df$Distance, run.cleaner.df$Time)
run.df <- read.csv("penang_training.csv")
inhours <- run.df[nchar(as.character(run.df$Time))==7,]
inmins <- run.df[!nchar(as.character(run.df$Time)) == 8,]
inhours$Time <- strptime(inhours$Time, "%H:%M:%S")
inmins$Time <- strptime(inmins$Time, "%M:%S")
run.clean.df <- rbind(inhours,inmins)
run.clean.df$Time
run.clean.df$Time <- run.clean.df$Time - as.POSIXlt("2014-12-19")
run.clean.df$Time
inmins$Time
inhours$Time
inhours <- run.df[nchar(as.character(run.df$Time))==7,]
inhours
inhours$Time
inhours
inmins <- run.df[!nchar(as.character(run.df$Time)) == 8,]
inmins
inmins == inhours
inmins <- run.df[nchar(as.character(run.df$Time)) == 8,]
inmins
inhours$Time <- strptime(inhours$Time, "%H:%M:%S")
inmins$Time <- strptime(inmins$Time, "%M:%S")
run.clean.df <- rbind(inhours,inmins)
run.clean.df$Time
run.clean.df$Time = run.clean.df$Time - as.POSIXct(sysdate())
run.clean.df$Time = run.clean.df$Time - as.POSIXct(sys.date())
run.clean.df$Time = run.clean.df$Time - as.POSIXct("2014-12-19")
str(run.clean.df$Time)
run.clean.df$Time = run.clean.df$Time - as.POSIXct("2014-12-19")
run.cleaner.df = run.clean.df
plot(run.cleaner.df$Distance, run.cleaner.df$Time)
run.predict <- lm(run.cleaner.df$Time ~ run.cleaner.df$Distance)
run.cleaner.df$Time
run.clean.df <- rbind(inhours,inmins)
run.cleaner.df$Time = run.clean.df$Time - as.POSIXlt("2014-12-19")
run.cleaner.df$Time
plot(run.cleaner.df$Distance, run.cleaner.df$Time)
run.predict <- lm(run.cleaner.df$Time ~ run.cleaner.df$Distance)
abline(run.predict)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
abline(run.predict)
race = run.cleaner.df[run.cleaner.df$Activity.Type == "Race",]
street = run.cleaner.df[run.cleaner.df$Activity.Type == "Street Running",]
track = run.cleaner.df[run.cleaner.df$Activity.Type == "Track Running",]
points(race$Dis, race$Ti, col = "coral", pch = 16)
points(street$Dis, street$Ti, col = "blueviolet", pch = 16)
points(track$Dis, track$Ti, col = "cyan2", pch = 16)
points(race$Dis, race$Ti, col = "coral", pch = 16)
?legend
legend("bottomright", col = c("coral","cyan2", "blueviolet"), pch = 16, legend = c("Race", "Track run", "Street run"))
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time [mins]", xlab = "Distance Ran [km]")
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time [mins]", xlab = "Distance Ran [km-", main = "Scatter plot of Finishing Time against Distance Ran")
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time [mins]", xlab = "Distance Ran [km]", main = "Scatter plot of Finishing Time against Distance Ran")
> plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time [mins]", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran [km]", las = 1)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time [mins]", xlab = "Distance Ran", main = "Scatter plot of Finishing Time against Distance Ran [km]", las = 1)
plot(run.cleaner.df$Distance,run.cleaner.df$Time, ylab = "Finishing Time [mins]", xlab = "Distance Ran [km]", main = "Scatter plot of Finishing Time against Distance Ran", las = 1)
abline(run.predict)
points(street$Dis, street$Ti, col = "blueviolet", pch = 16)
points(track$Dis, track$Ti, col = "cyan2", pch = 16)
points(race$Dis, race$Ti, col = "coral", pch = 16)
> legend("bottomright", col = c("coral","cyan2", "blueviolet"), pch = 16, legend = c("Race", "Track run", "Street run"))
legend("bottomright", col = c("coral","cyan2", "blueviolet"), pch = 16, legend = c("Race", "Track run", "Street run"))
install.package("xlsx")
install.packages("xlsx")
library(xlsx)
?xlsx.read
?xlsx.read
?read.xlsx
getwd()
install.packages(xlsx)
install.packages("xlsx")
install.packages("xml")
install.packages("XML")
library(xlsx)
install.packages("data.table")
install.packages("sqldf")
library(MASS)
library(ISLR)
library(MASS)
library(ISLR)
names(Boston)
?Boston
rm(list=lm())
rm(list=lm())
?rm
envr()
env()
environment()
rm(lst=lm())
lm()
rm(lst=ls())
rm(list=ls())
?predict
?interval
args(predict)
plot(medv~lstat,Boston)
fit1=lm(medv~lstat,data=Boston)
fit1
names(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
34.55 + 5 * (-0.95)
34.55 + 15 * (-0.95)
predict(fit1,data.frame(lstat=c(1,13,35)),interval="confidence")
predict(fit1,data.frame(lstat=c(5,10,15)),interval="confidence")
predict(fit2,data.frame(lstat=c(5,10,15)),interval="confidence")
fit2=lm(medv~lstat+age,data=Boston)
predict(fit2,data.frame(lstat=c(5,10,15)),interval="confidence")
predict(fit2,data.frame(lstat=c(5,10,15), age = 20),interval="confidence")
predict(fit2,data.frame(lstat=c(5,10,15), age = 10),interval="confidence")
predict(fit2,data.frame(lstat=c(5,10,15), age = 100),interval="confidence")
predict(fit2,data.frame(lstat=c(5,10,15), age = c(10,50,100),interval="confidence")
predict(fit2,data.frame(lstat=c(5,10,15), age = c(10,50,100)),interval="confidence")
?I
fit7=lm(medv~poly(lstat,4))
attach(Boston)
fit7=lm(medv~poly(lstat,4))
summary(fit7)
plot(medv~lstat)
points(lstat,fitted(fit7),col="blue",pch=20)
fit7
fix(Carseats)
fix(Carseats)
head(Carseats)
Carseats
library(MASS)
library(ISLR)
fix(Boston)
install.packages(c("ggplot2","caret"))
install.packages("randomforest")
install.packages("randomForest")
library(cluster)
?require
install.packages("ISLR")
require(ISLR)
?pair
?pairs
?col
names(Smarket)
pairs(Smarket,col=Smarket$Direction)
summary(Smarket)
names(Smarket)
contrasts(Smarket$Direction)
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
glm.probs=predict(glm.fit,type="response")
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
head(glm.pred)
head(glm.probs)
attach(Smarket)
table(glm.pred,Direction)
?table
mean(glm.pred==Direction)
mean(glm.fit[glm.pred==Direction])
head(glm.fit)
summary(glm.fit)
names(glm.fit)
mean(glm.fit$fitted.values[glm.pred==Direction])
mean(glm.pred==Direction)
?mean
count(glm.pred==direction)
length(glm.pred==direction)
count(glm.pred==Direction)
length(glm.pred==Direction)
length(glm.pred)
length(Direction)
tables(glm.pred == Direction)
table(glm.pred == Direction)
652/1250
mean(glm.pred==Direction)
?predict
install.packages("stats")
?stats
swirl()
library(swirl)
swirl()
?read.csv
read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
path2csv
mydf <- read.csv(path2csv, stringAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageversion("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
name(cran)
names(cran)
select(cran, -time)
select(cran, -5:20)
select(cran, -1:3)
select(cran, -x:size)
select(cran, -X:size)
select(cran, -(X:size)
)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), id_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- selection(cran, ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
crans
cran3
cran
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
cran3 <- mutate(cran, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
exit()
swirl()
html <- http://biostat.jhsph.edu/~jleek/contact.html
html <- "http://biostat.jhsph.edu/~jleek/contact.html"
con = url(html)
htmlCode = readLines(con)
html <- "http://biostat.jhsph.edu/~jleek/contact.html"
con = url(html)
htmlCode = readLines(con)
close(con)
htmlCode
htmlCode[10]
library(httr)
html2 <- GET(html)
content2 <- content(html2, as = "text")
parsedHtml = htmlParse(content2, asTest = TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
html <- "http://biostat.jhsph.edu/~jleek/contact.html"
html2 <- GET(html)
content2 <- content(html2, as = "text")
parsedHtml = htmlParse(content2, asTest = TRUE)
library(XML)
parsedHtml = htmlParse(content2, asTest = TRUE)
parsedHtml = htmlParse(content2, asText = TRUE)
xpathSApply(parsedHtml, "//title", xmlValue)
parsedHtml
htmlCode
htmlCode[10]
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
donwload.file(file, "otherFormat.for")
download.file(file, "otherFormat.for")
getwd()
read.for("otherFormat.for")
otherFor <- read.tables("otherFormat.for", sep = " ")
otherFor <- read.table("otherFormat.for", sep = " ")
otherFor <- read.data("otherFormat.for", sep = " ")
otherFor <- read.file("otherFormat.for", sep = " ")
file <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
file_dl <- download.file(file, "otherFormat.for")
x <- read.fwf(file=file_dl, skip=4, widths=c(12, 7,4, 9,4, 9,4, 9,4))
x <- read.fwf(file_dl, skip=4, widths=c(12, 7,4, 9,4, 9,4, 9,4))
?read.fwf
download.file(file, "otherFormat.for")
file_dl <- "otherFormat.for"
x <- read.fwf(file_dl, skip=4, widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(x)
lapply(x, sum)
str(x)
lapply(x[2:9], sum)
length(x)
lapply(x[4], sum)
head(x)
y <- read.fwf(file_dl, skip=4, widths=c(10, 7,4, 9,4, 9,4, 9,4))
head(y)
nchar(x[1,1])
nchar(x[2,1])
length(x[2,1])
nstr(x[2,1])
n(x[2,1])
x[2,1]
x[3,1]
y <- read.fwf(file_dl, skip=4, widths=c(14, 5,4, 9,4, 9,4, 9,4))
head(y)
head(x)
y <- read.fwf(file_dl, skip=4, widths=c(10, 9,4, 9,4, 9,4, 9,4))
head(y)
x[1,3]
getwd()
setwd("./github")
makedir("getting_and_cleaning_data")
mkdir("getting_and_cleaning_data")
mk.dir("getting_and_cleaning_data")
?dir.create
dir.create("getting_and_cleaning_data")
setwd("./github/getting_and_cleaning_data")
setwd("./getting_and_cleaning_data")
getwd()
zip <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
unzip(zip)
zip <- download.file(url)
zip <- download.file(url, "project3")
zip <- download.file(url, "project3.zip")
zip <- download.file(url, project3.zip)
?download.file
zip <- download.file(url, "project3.zip")
zip <- download.file(url, destfile = "project3.zip")
?download.zip
zip <- download.file(url, destfile = "project3")
temp <- tempfile()
download.file(url,temp)
download.file(url, temp)
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
temp <- tempfile()
download.file(url, temp)
data <- read.table(unz(temp, "project3.dat"))
data <- read.table(unz(temp, "getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.dat"))
